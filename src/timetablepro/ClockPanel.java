/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package timetablepro;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import static java.lang.System.out;
import java.util.List;


public class ClockPanel extends javax.swing.JPanel implements ActionListener {
    static final int ARC_WIDTH = 10;
    static final int CLOCK_SIZE = 200;
    static final int START_ANGLE = 90;
    
    
    int angle, timeUnit, currentTime, mode;
    TimetablePro tp;
    GameOrganiser go;
    Timer t;
    long sysCurrentTime, sysEnd;
    
    public ClockPanel() {
        initComponents();
        angle = 360;
        currentTime = 0;
        timeUnit = 200;
        t = new Timer(timeUnit, this);
    }
    public void resetClock() {
        currentTime = 0;
    }
    public void setMainScreen(TimetablePro tp, GameOrganiser go) {
        this.tp = tp;
        this.go = go;
    }
    public void giveBonusTime() {
        currentTime += timetablepro.TimetablePro.BONUS_TIME_MS;
        if (currentTime > timetablepro.TimetablePro.GAME_TIME_MS) currentTime = timetablepro.TimetablePro.GAME_TIME_MS;
    }
    public void takeOffTime() {
        currentTime -= timetablepro.TimetablePro.BONUS_TIME_MS;
    }
    public void startGame(int mode) {
        this.mode = mode;
        
        if (mode <= timetablepro.TimetablePro.MODE_TIMETABLE) {
            if (mode == timetablepro.TimetablePro.MODE_60_SEC) {
                sysCurrentTime = System.currentTimeMillis();
                sysEnd = sysCurrentTime + timetablepro.TimetablePro.TEST_TIME_MS;
            } else {
                currentTime = timetablepro.TimetablePro.GAME_TIME_MS;
            }
            t.start();
        }
    }
    
    public void actionPerformed(ActionEvent e) {
        if (mode == timetablepro.TimetablePro.MODE_60_SEC) {
            // tick
            sysCurrentTime = System.currentTimeMillis();
            
            // calc angle
            angle = (int)((sysEnd - sysCurrentTime) * 1.0 / timetablepro.TimetablePro.TEST_TIME_MS * 360);
            
            if (sysCurrentTime > sysEnd && go.inGame) {
                t.stop();
                go.gameOver(null, false);
            }
        } else {
            // does the tick
            currentTime -= timeUnit;

            // calc angle
            angle = (int)(currentTime * 1.0 / timetablepro.TimetablePro.GAME_TIME_MS * 360);


            if (currentTime <= 0 && go.inGame) {
                t.stop();
                if (go != null)
                go.gameOver(null, false);
            }
        }
        tp.repaint();
    }
    public void updateTestClock(List<Integer> testNumbers) {
        double questionsToGo = testNumbers.size() * 1.0;
        double portion = questionsToGo / timetablepro.TimetablePro.MAX_TIMETABLE;
        angle = (int) (portion * 360);
        tp.repaint();
    }
    public void paintComponent(Graphics g){
        if (! go.inGame) return;

        g.setColor(timetablepro.TimetablePro.TIMER_COLOUR);
        g.fillArc(0, 0, CLOCK_SIZE, CLOCK_SIZE, START_ANGLE, -angle);
        g.setColor(timetablepro.TimetablePro.GLOBAL_BG);
        g.fillArc(ARC_WIDTH, ARC_WIDTH, 
                CLOCK_SIZE - 2*ARC_WIDTH, CLOCK_SIZE - 2*ARC_WIDTH, 
                START_ANGLE, -angle);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 204, 153));
        setPreferredSize(new java.awt.Dimension(200, 200));
        setRequestFocusEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    
}
